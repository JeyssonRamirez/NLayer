//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;



using Nlayer.Nlayer.Dominio.ModuloPrincipal.Entidades;
using Nlayer.Nlayer.Dominio.Nucleo;
using Nlayer.Nlayer.Infraestructura.Datos.Nucleo;

namespace Nlayer.Nlayer.Infraestructura.Datos.ModuloPrincipal.UnidadDeTrabajo
{
    public partial class ModeloPrincipal : ObjectContext, IModeloPrincipalUnidadDeTrabajo
    {
        public const String ConnectionString = "name=ModeloPrincipal";
        public const String ContainerName = "ModeloPrincipal";
    
        #region Constructors
    
        public ModeloPrincipal()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region IModeloPrincipalUnidadDeTrabajo
    	
    	public  IObjectSet<TEntidad> CrearSet<TEntidad>() where TEntidad : class, IObjectWithChangeTracker
    	{
    		return base.CreateObjectSet<TEntidad>() as IObjectSet<TEntidad>;
    	}
    	
    	public void RegistrarCambios<TEntidad>(TEntidad entidad) where TEntidad : class, IObjectWithChangeTracker
    	{
    		this.CreateObjectSet<TEntidad>().ApplyChanges(entidad);
    	}
    	
    	public void RealizarYRefrescarCambios()
    	{
    		try
    		{
    			//Default option is DetectChangesBeforeSave
    			base.SaveChanges();
    			
    			//accept all changes in STE entities attached in context
                IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                     where entry.Entity != null && (entry.Entity as IObjectWithChangeTracker != null)
                                                                     select entry.Entity as IObjectWithChangeTracker);
    
                steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    		}
    		catch (OptimisticConcurrencyException ex)
    		{
    			
    			//if client wins refresh data ( queries database and adapt original values
    			//and re-save changes in client
    			base.Refresh(RefreshMode.ClientWins, ex.StateEntries.Select(se => se.Entity));
    			
    			base.SaveChanges(); 
    			
    			//accept all changes in STE entities attached in context
                IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                     where entry.Entity != null && (entry.Entity as IObjectWithChangeTracker != null)
                                                                     select entry.Entity as IObjectWithChangeTracker);
    
                steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    		}
    	}
    	
    	public int RealizarCambios()
    	{
    		//Default option is DetectChangesBeforeSave
    		int filasAfectadas = base.SaveChanges();
    		
    		//accept all changes in STE entities attached in context
    		IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                 where entry.Entity != null && (entry.Entity as IObjectWithChangeTracker != null)
                                                                 select entry.Entity as IObjectWithChangeTracker);
    
    		steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    		
    		return filasAfectadas;
    	}
    	
    	public void RegresarCambios()
    	{
    		//Refresh context and override changes
                
    		IEnumerable<object> itemsToRefresh = base.ObjectStateManager.GetObjectStateEntries(EntityState.Modified)
                                                                        .Where(ose=>!ose.IsRelationship && ose.Entity != null)
                                                                        .Select(ose=>ose.Entity);
            base.Refresh(RefreshMode.StoreWins, itemsToRefresh);
    	}
    	

        #endregion

        #region ObjectSet Properties
    
        public IObjectSet<Aplicacion> Aplicacion
        {
            get { return _aplicacion  ?? (_aplicacion = CreateObjectSet<Aplicacion>("Aplicacion")); }
        }
        private ObjectSet<Aplicacion> _aplicacion;
    
        public IObjectSet<ErrorAplicacion> ErrorAplicacion
        {
            get { return _errorAplicacion  ?? (_errorAplicacion = CreateObjectSet<ErrorAplicacion>("ErrorAplicacion")); }
        }
        private ObjectSet<ErrorAplicacion> _errorAplicacion;
    
        public IObjectSet<Membresia> Membresia
        {
            get { return _membresia  ?? (_membresia = CreateObjectSet<Membresia>("Membresia")); }
        }
        private ObjectSet<Membresia> _membresia;
    
        public IObjectSet<Perfil> Perfil
        {
            get { return _perfil  ?? (_perfil = CreateObjectSet<Perfil>("Perfil")); }
        }
        private ObjectSet<Perfil> _perfil;
    
        public IObjectSet<Propiedad> Propiedad
        {
            get { return _propiedad  ?? (_propiedad = CreateObjectSet<Propiedad>("Propiedad")); }
        }
        private ObjectSet<Propiedad> _propiedad;
    
        public IObjectSet<Rol> Rol
        {
            get { return _rol  ?? (_rol = CreateObjectSet<Rol>("Rol")); }
        }
        private ObjectSet<Rol> _rol;
    
        public IObjectSet<RolPropiedad> RolPropiedad
        {
            get { return _rolPropiedad  ?? (_rolPropiedad = CreateObjectSet<RolPropiedad>("RolPropiedad")); }
        }
        private ObjectSet<RolPropiedad> _rolPropiedad;
    
        public IObjectSet<RolUsuario> RolUsuario
        {
            get { return _rolUsuario  ?? (_rolUsuario = CreateObjectSet<RolUsuario>("RolUsuario")); }
        }
        private ObjectSet<RolUsuario> _rolUsuario;
    
        public IObjectSet<SiteMap> SiteMap
        {
            get { return _siteMap  ?? (_siteMap = CreateObjectSet<SiteMap>("SiteMap")); }
        }
        private ObjectSet<SiteMap> _siteMap;
    
        public IObjectSet<Usuario> Usuario
        {
            get { return _usuario  ?? (_usuario = CreateObjectSet<Usuario>("Usuario")); }
        }
        private ObjectSet<Usuario> _usuario;
    
        public IObjectSet<ValorPropiedad> ValorPropiedad
        {
            get { return _valorPropiedad  ?? (_valorPropiedad = CreateObjectSet<ValorPropiedad>("ValorPropiedad")); }
        }
        private ObjectSet<ValorPropiedad> _valorPropiedad;

        #endregion

    }
    
}

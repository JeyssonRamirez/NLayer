//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Sci.Nlayer.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    public partial class ErrorAplicacion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ErrorAplicacionId
        {
            get { return _errorAplicacionId; }
            set
            {
                if (_errorAplicacionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ErrorAplicacionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _errorAplicacionId = value;
                    OnPropertyChanged("ErrorAplicacionId");
                }
            }
        }
        private int _errorAplicacionId;
    
        [DataMember]
        public string Aplicacion
        {
            get { return _aplicacion; }
            set
            {
                if (_aplicacion != value)
                {
                    _aplicacion = value;
                    OnPropertyChanged("Aplicacion");
                }
            }
        }
        private string _aplicacion;
    
        [DataMember]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    OnPropertyChanged("Error");
                }
            }
        }
        private string _error;
    
        [DataMember]
        public string Excepcion
        {
            get { return _excepcion; }
            set
            {
                if (_excepcion != value)
                {
                    _excepcion = value;
                    OnPropertyChanged("Excepcion");
                }
            }
        }
        private string _excepcion;
    
        [DataMember]
        public string Interna
        {
            get { return _interna; }
            set
            {
                if (_interna != value)
                {
                    _interna = value;
                    OnPropertyChanged("Interna");
                }
            }
        }
        private string _interna;
    
        [DataMember]
        public Nullable<System.DateTime> Registrado
        {
            get { return _registrado; }
            set
            {
                if (_registrado != value)
                {
                    _registrado = value;
                    OnPropertyChanged("Registrado");
                }
            }
        }
        private Nullable<System.DateTime> _registrado;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Sci.Nlayer.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Propiedad))]
    [KnownType(typeof(Rol))]
    public partial class RolPropiedad: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RolPropiedadId
        {
            get { return _rolPropiedadId; }
            set
            {
                if (_rolPropiedadId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RolPropiedadId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rolPropiedadId = value;
                    OnPropertyChanged("RolPropiedadId");
                }
            }
        }
        private int _rolPropiedadId;
    
        [DataMember]
        public int RolId
        {
            get { return _rolId; }
            set
            {
                if (_rolId != value)
                {
                    ChangeTracker.RecordOriginalValue("RolId", _rolId);
                    if (!IsDeserializing)
                    {
                        if (Rol != null && Rol.RolId != value)
                        {
                            Rol = null;
                        }
                    }
                    _rolId = value;
                    OnPropertyChanged("RolId");
                }
            }
        }
        private int _rolId;
    
        [DataMember]
        public int PropiedadId
        {
            get { return _propiedadId; }
            set
            {
                if (_propiedadId != value)
                {
                    ChangeTracker.RecordOriginalValue("PropiedadId", _propiedadId);
                    if (!IsDeserializing)
                    {
                        if (Propiedad != null && Propiedad.PropiedadId != value)
                        {
                            Propiedad = null;
                        }
                    }
                    _propiedadId = value;
                    OnPropertyChanged("PropiedadId");
                }
            }
        }
        private int _propiedadId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Propiedad Propiedad
        {
            get { return _propiedad; }
            set
            {
                if (!ReferenceEquals(_propiedad, value))
                {
                    var previousValue = _propiedad;
                    _propiedad = value;
                    FixupPropiedad(previousValue);
                    OnNavigationPropertyChanged("Propiedad");
                }
            }
        }
        private Propiedad _propiedad;
    
        [DataMember]
        public Rol Rol
        {
            get { return _rol; }
            set
            {
                if (!ReferenceEquals(_rol, value))
                {
                    var previousValue = _rol;
                    _rol = value;
                    FixupRol(previousValue);
                    OnNavigationPropertyChanged("Rol");
                }
            }
        }
        private Rol _rol;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Propiedad = null;
            Rol = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupPropiedad(Propiedad previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RolPropiedad.Contains(this))
            {
                previousValue.RolPropiedad.Remove(this);
            }
    
            if (Propiedad != null)
            {
                if (!Propiedad.RolPropiedad.Contains(this))
                {
                    Propiedad.RolPropiedad.Add(this);
                }
    
                PropiedadId = Propiedad.PropiedadId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Propiedad")
                    && (ChangeTracker.OriginalValues["Propiedad"] == Propiedad))
                {
                    ChangeTracker.OriginalValues.Remove("Propiedad");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Propiedad", previousValue);
                }
                if (Propiedad != null && !Propiedad.ChangeTracker.ChangeTrackingEnabled)
                {
                    Propiedad.StartTracking();
                }
            }
        }
    
        private void FixupRol(Rol previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RolPropiedad.Contains(this))
            {
                previousValue.RolPropiedad.Remove(this);
            }
    
            if (Rol != null)
            {
                if (!Rol.RolPropiedad.Contains(this))
                {
                    Rol.RolPropiedad.Add(this);
                }
    
                RolId = Rol.RolId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Rol")
                    && (ChangeTracker.OriginalValues["Rol"] == Rol))
                {
                    ChangeTracker.OriginalValues.Remove("Rol");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Rol", previousValue);
                }
                if (Rol != null && !Rol.ChangeTracker.ChangeTrackingEnabled)
                {
                    Rol.StartTracking();
                }
            }
        }

        #endregion
    }
}

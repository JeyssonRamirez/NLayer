//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Sci.Nlayer.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Aplicacion))]
    [KnownType(typeof(Usuario))]
    public partial class Perfil: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PerfilId
        {
            get { return _perfilId; }
            set
            {
                if (_perfilId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PerfilId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _perfilId = value;
                    OnPropertyChanged("PerfilId");
                }
            }
        }
        private int _perfilId;
    
        [DataMember]
        public int AplicacionId
        {
            get { return _aplicacionId; }
            set
            {
                if (_aplicacionId != value)
                {
                    ChangeTracker.RecordOriginalValue("AplicacionId", _aplicacionId);
                    if (!IsDeserializing)
                    {
                        if (Aplicacion != null && Aplicacion.AplicacionId != value)
                        {
                            Aplicacion = null;
                        }
                    }
                    _aplicacionId = value;
                    OnPropertyChanged("AplicacionId");
                }
            }
        }
        private int _aplicacionId;
    
        [DataMember]
        public int UsuarioId
        {
            get { return _usuarioId; }
            set
            {
                if (_usuarioId != value)
                {
                    ChangeTracker.RecordOriginalValue("UsuarioId", _usuarioId);
                    if (!IsDeserializing)
                    {
                        if (Usuario != null && Usuario.UsuarioId != value)
                        {
                            Usuario = null;
                        }
                    }
                    _usuarioId = value;
                    OnPropertyChanged("UsuarioId");
                }
            }
        }
        private int _usuarioId;
    
        [DataMember]
        public System.DateTime UltimaActividad
        {
            get { return _ultimaActividad; }
            set
            {
                if (_ultimaActividad != value)
                {
                    _ultimaActividad = value;
                    OnPropertyChanged("UltimaActividad");
                }
            }
        }
        private System.DateTime _ultimaActividad;
    
        [DataMember]
        public System.DateTime UltimaActualizacion
        {
            get { return _ultimaActualizacion; }
            set
            {
                if (_ultimaActualizacion != value)
                {
                    _ultimaActualizacion = value;
                    OnPropertyChanged("UltimaActualizacion");
                }
            }
        }
        private System.DateTime _ultimaActualizacion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Aplicacion Aplicacion
        {
            get { return _aplicacion; }
            set
            {
                if (!ReferenceEquals(_aplicacion, value))
                {
                    var previousValue = _aplicacion;
                    _aplicacion = value;
                    FixupAplicacion(previousValue);
                    OnNavigationPropertyChanged("Aplicacion");
                }
            }
        }
        private Aplicacion _aplicacion;
    
        [DataMember]
        public Usuario Usuario
        {
            get { return _usuario; }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    var previousValue = _usuario;
                    _usuario = value;
                    FixupUsuario(previousValue);
                    OnNavigationPropertyChanged("Usuario");
                }
            }
        }
        private Usuario _usuario;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Aplicacion = null;
            Usuario = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupAplicacion(Aplicacion previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Perfil.Contains(this))
            {
                previousValue.Perfil.Remove(this);
            }
    
            if (Aplicacion != null)
            {
                if (!Aplicacion.Perfil.Contains(this))
                {
                    Aplicacion.Perfil.Add(this);
                }
    
                AplicacionId = Aplicacion.AplicacionId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Aplicacion")
                    && (ChangeTracker.OriginalValues["Aplicacion"] == Aplicacion))
                {
                    ChangeTracker.OriginalValues.Remove("Aplicacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Aplicacion", previousValue);
                }
                if (Aplicacion != null && !Aplicacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    Aplicacion.StartTracking();
                }
            }
        }
    
        private void FixupUsuario(Usuario previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Perfil.Contains(this))
            {
                previousValue.Perfil.Remove(this);
            }
    
            if (Usuario != null)
            {
                if (!Usuario.Perfil.Contains(this))
                {
                    Usuario.Perfil.Add(this);
                }
    
                UsuarioId = Usuario.UsuarioId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Usuario")
                    && (ChangeTracker.OriginalValues["Usuario"] == Usuario))
                {
                    ChangeTracker.OriginalValues.Remove("Usuario");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Usuario", previousValue);
                }
                if (Usuario != null && !Usuario.ChangeTracker.ChangeTrackingEnabled)
                {
                    Usuario.StartTracking();
                }
            }
        }

        #endregion
    }
}
